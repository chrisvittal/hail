#include "mlir/Dialect/Arithmetic/IR/Arithmetic.h"
#include "mlir/Dialect/Linalg/IR/Linalg.h"
#include "mlir/Dialect/SCF/IR/SCF.h"
#include "mlir/Dialect/Tensor/IR/Tensor.h"
#include "mlir/IR/MLIRContext.h"
#include "mlir/InitAllDialects.h"
#include "mlir/InitAllPasses.h"
#include "mlir/Pass/Pass.h"
#include "mlir/Pass/PassManager.h"
#include "mlir/Support/FileUtilities.h"
#include "mlir/Tools/mlir-opt/MlirOptMain.h"
#include "llvm/Support/CommandLine.h"
#include "llvm/Support/InitLLVM.h"
#include "llvm/Support/SourceMgr.h"
#include "llvm/Support/ToolOutputFile.h"

#include "InitAllPasses.h"

// dialect includes
#include "Dialect/CPS/IR/CPS.h"
#include "Dialect/Missing/IR/Missing.h"
#include "Dialect/Sandbox/IR/Sandbox.h"

int main(int argc, char **argv) {
  // mlir::registerAllPasses();

  // General passes
  mlir::registerTransformsPasses();

  // Conversion passes
  mlir::registerConvertAffineToStandardPass();
  mlir::registerConvertLinalgToStandardPass();
  mlir::registerConvertTensorToLinalgPass();
  mlir::registerConvertVectorToSCFPass();
  mlir::registerReconcileUnrealizedCastsPass();
  mlir::registerSCFToControlFlowPass();

  // Dialect passes
  mlir::bufferization::registerBufferizationPasses();
  mlir::registerLinalgLowerToAffineLoopsPass();
  mlir::registerLinalgLowerToLoopsPass();

  // Hail passes
  hail::ir::registerAllPasses();

  // Register additional dialects below. Only dialects that will be *parsed*
  // by the tool need be registered, not the ones generated by any passes the
  // tool runs.

  mlir::DialectRegistry registry;
  registry.insert<mlir::arith::ArithmeticDialect, mlir::func::FuncDialect,
                  mlir::linalg::LinalgDialect, mlir::scf::SCFDialect,
                  mlir::tensor::TensorDialect, hail::ir::CPSDialect,
                  hail::ir::SandboxDialect, hail::ir::MissingDialect>();

  // Uncomment the line below to include *all* MLIR Core dialects
  // registerAllDialects(registry);

  return mlir::asMainReturnCode(
      mlir::MlirOptMain(argc, argv, "Hail optimizer driver\n", registry));
}
